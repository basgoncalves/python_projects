/**
 * @class btkSetAnalogUnit
 * @brief Modify the analog's unit and return a list of the updated analog channels.
 * @syntax{[analogs\, analogsInfo] = %btkSetAnalogUnit(h\, idx\, newunit)\n [analogs\, analogsInfo] = %btkSetAnalogUnit(h\, label\, newunit)}
 * @param h Handle pointing to a C++ btk::Acquisition object.
 * @param idx Integer containing the index of the analog channel to modify.
 * @param label String containing the label of the analog channel to modify.
 * @param newunit String with the new unit.
 * @retval analogs Updated list of analog channels. Its format is the same than using the function btkGetAnalogs.
 * @retval analogsInfo Updated informations related to the analog channels. Its format is the same than using the function btkGetAnalogs.
 *
 * @par Detailed unit:
 * <tt>%btkSetAnalogUnit(h, idx, newunit)</tt> modifies the unit of the analog channel specified by the index @c idx.
 * <tt>%btkSetAnalogUnit(h, label, newunit)</tt> modifies the unit of the analog channel specified by the label @c label.
 * 
 * @sa btkGetAnalog, btkSetAnalogDescription, btkSetAnalogGain, btkSetAnalogLabel, btkSetAnalogOffset, btkSetAnalogScale, btkSetAnalogValues
 * @ingroup BTKMatlabAnalogModifier
 */