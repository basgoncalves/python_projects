/**
 * @class btkSetMetaDataFormat
 * @brief Set a metadata's format.
 * @syntax{md = %btkSetMetaDataFormat(h\, idx\, newformat)\n md = btkSetMetaDataFormat(h\, idx\, subidx\, newformat)\n md = %btkSetMetaDataFormat(h\, idx\, subidx\, ...\, newformat)\n md = %btkSetMetaDataFormat(h\, label\, newformat)\n md = %btkSetMetaDataFormat(h\, label\, sublabel\, newformat)\n md = %btkSetMetaDataFormat(h\, label\, sublabel\, ...\, newformat)}
 * @param h Handle pointing to a C++ btk::Acquisition object.
 * @param idx Integer specifying the index of a metadata.
 * @param subidx Integer specifying the index of a metadata.
 * @param label String specifying the label of a metadata.
 * @param sublabel String specifying the label of a metadata.
 * @param ... Others integers and/or strings to select the metadata to remove.
 * @param newformat String with the new format (see detailed description for the available format).
 * @retval md Structure with the same format than the function btkGetMetaData.
 *
 * @par Detailed description:
 * <tt>%btkSetMetaDataFormat(h, idx, newformat)</tt> sets the format of the metadata with the index @c idx contained in the root.
 * <tt>%btkSetMetaDataFormat(h, idx, subidx, newformat)</tt> sets the format of the metadata with the index @c subidx contained in the metadata with the index @c idx.
 * <tt>%btkSetMetaDataFormat(h, idx, subidx, ..., newformat)</tt> sets the format of any metadata specified by the gives indices.
 * <tt>%btkSetMetaDataFormat(h, label, newformat)</tt> sets the format of the metadata with the label @c label contained in the root.
 * <tt>%btkSetMetaDataFormat(h, label, sublabel, newformat)</tt>  sets the format of the metadata with the label @c sublabel contained in the metadata with the label @c label.
 * <tt>%btkSetMetaDataFormat(h, label, sublabel, ..., newformat)</tt> sets the format of any metadata specified by the given labels.
 * \n\n
 * You can mix label and index to set the format of a metadata entry.
 * \n\n
 * The following formats are available:
 * - Char: metadata's values are strings;
 * - Byte: metadata's values are bytes (coded on 8 bits)
 * - Integer: metadata's values are integer (coded on 16 bits)
 * - Real: metadata's values are real (float coded on 32 bits)
 * If you modify the format of a metadata, than its values are transformed to fit 
 * (if possible) the new format. There is no problem to transform a byte into an integer
 * or in a float or a string. But the reverse is not always true. A string with a number
 * inside (for example 1.2345) can be converted as a float. But the string HEEL will be 
 * converted as the value 0. Moreover, converting a string to a number (or the reverse)
 * will adapt automatically the dimensions.
 * \n\n
 * The number of sub-level is infinite. However, the main common use of the metadata is to use 2 levels. This use was introduced in the C3D format.
 *
 * @sa btkSetMetaDataDescription, btkSetMetaDataDimensions, btkSetMetaDataLabel, btkSetMetaDataUnlock, btkSetMetaDataValue
 * @ingroup BTKMatlabMetaDataModifier
 */