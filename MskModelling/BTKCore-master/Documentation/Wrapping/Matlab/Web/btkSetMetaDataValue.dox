/**
 * @class btkSetMetaDataValue
 * @brief Set one metadata's value.
 * @syntax{md = %btkSetMetaDataValue(h\, idx\, index\, newvalue)\n md = %btkSetMetaDataValue(h\, idx\, subidx\, index\, newvalue)\n md = %btkSetMetaDataValue(h\, idx\, subidx\, ...\, index\, newvalue)\n md = %btkSetMetaDataValue(h\, label\, index\, newvalue)\n md = %btkSetMetaDataValue(h\, label\, sublabel\, index\, newvalue)\n md = %btkSetMetaDataValue(h\, label\, sublabel\, ...\, index\, newvalue)}
 * @param h Handle pointing to a C++ btk::Acquisition object.
 * @param idx Integer specifying the index of a metadata.
 * @param subidx Integer specifying the index of a metadata.
 * @param label String specifying the label of a metadata.
 * @param sublabel String specifying the label of a metadata.
 * @param ... Others integers and/or strings to select the metadata to remove.
 * @param index Integer with the index of the value to modify.
 * @param newvalue New value (depending the metadata, it can be a real or a string).
 * @retval md Structure with the same format than the function btkGetMetaData.
 *
 * @par Detailed description:
 * <tt>%btkSetMetaDataValue(h, idx, index, newvalue)</tt> sets the value at the index @c index for the metadata with the index @c idx contained in the root.\n
 * <tt>%btkSetMetaDataValue(h, idx, subidx, index, newvalue)</tt> sets the value at the index @c index for the metadata with the index @c subidx contained in the metadata with the index @c idx.\n
 * <tt>%btkSetMetaDataValue(h, idx, subidx, ..., index, newvalue)</tt> sets the value at the index @c index for any metadata specified by the gives indices.\n
 * <tt>%btkSetMetaDataValue(h, label, index, newvalue)</tt> sets the value at the index @c index for the metadata with the label @c label contained in the root.\n
 * <tt>%btkSetMetaDataValue(h, label, sublabel, index, newvalue)</tt>  sets the value at the index @c index for the metadata with the label @c sublabel contained in the metadata with the label @c label.\n
 * <tt>%btkSetMetaDataValue(h, label, sublabel, ..., index, newvalue)</tt> sets the value at the index @c index for any metadata specified by the given labels.
 * \n\n
 * Based on the format of the metadata, the value set is automaticaly converted to fit the format. This design gives you the possibiliy to pass a Matlab native number format (double) or a char or a cell containing a char and then its content is converted.
 * \n\n
 * You can mix label and index to set a specific value of a metadata entry.
 * \n\n
 * Based on the format of the metadata, the value set is automaticaly converted to fit the
 * format. This design gives you the possibiliy to pass a Matlab native number format
 * (double) or a char or a cell containing a char and then its content is converted.
 * \n\n
 * The number of sub-level is infinite. However, the main common use of the metadata is to use 2 levels. This use was introduced in the C3D format.
 *
 * @sa btkSetMetaDataDescription, btkSetMetaDataDimensions, btkSetMetaDataFormat, btkSetMetaDataLabel, btkSetMetaDataUnlock
 * @ingroup BTKMatlabMetaDataModifier
 */
