<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="btkWriteAcquisition" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>btkWriteAcquisition</refname>
    <refpurpose>Write acquisition's data into file (C3D, TRC, ...)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>btkWriteAcquisition(h, filename, ...)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>h</term>
        <listitem><para>The handle used to represent an acquisition.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>filename</term>
        <listitem><para>Non empty string containing the path of the acquisition to read.</para></listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>Exports acquisition's data represented as the handle <literal>h</literal> into the file <literal>filename</literal>. The choice of the file format is based on the file extension (for example, '.trc' or '.c3d'). This handle H must be obtained by the use of a btk* function.</para>
    <para>Some formats (for example C3D) have options to store an acquisition. In a binary format, it is possible to specify the byte order (see <literal>ByteOrder</literal> option) and the storage format (see <literal>StorageFormat</literal> option). The options are given after the filename by first the name of the option and second its value</para>
    <para>The <literal>ByteOrder</literal> option can receive 3 values:
      <itemizedlist>
        <listitem><literal>IEEE_LittleEndian</literal>: write integer and float in x86 format (PC)</listitem>
        <listitem><literal>IEEE_BigEndian</literal>: write integer and float in PPC/MIPS format (SGI)</listitem>
        <listitem><literal>VAX_LittleEndian</literal>: write integer and float in VAX format (DEC)</listitem>
      </itemizedlist>
The <literal>StorageFormat</literal> option can receive 2 values:
<itemizedlist>
<listitem><literal>Integer</literal>: Acquisition data are scaled and stored as 16 bits integer</listitem>
<listitem><literal>Float</literal>: Acquisition data are stored as floating values</listitem>
</itemizedlist></para>
    <para>Without any option, a C3D File is written using the machine byte order and the float as storage format. Using these options on ASCII formats  (for example TRC) have no effect on the file data. The writing of an empty acquisition (no point and no analog channel) in a C3D file will create a template C3D file. Only the metadata will be saved.</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example">btkWriteAcquisition(h, 'filename.c3d')
btkWriteAcquisition(h, 'filename.c3d', 'StorageFormat', 'Float')
btkWriteAcquisition(h, 'filename.c3d', 'ByteOrder', 'VAX_LittleEndian')
btkWriteAcquisition(h, 'filename.c3d', 'StorageFormat', 'Integer', 'ByteOrder', 'IEEE_LittleEndian')</programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="btkReadAcquisition">btkReadAcquisition</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
